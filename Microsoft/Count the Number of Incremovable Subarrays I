class Solution {
public:
    bool isStrictlyIncreasing(vector<int>& nums) {
        for (int i = 1; i < nums.size(); i++) {
            if (nums[i] <= nums[i - 1]) return false;
        }
        return true;
    }

    int incremovableSubarrayCount(vector<int>& nums) {
        int n = nums.size();
        int count = 0;

        // Iterate over all possible subarrays
        for (int start = 0; start < n; start++) {
            for (int end = start; end < n; end++) {
                vector<int> remaining;

                // Build the remaining array excluding subarray nums[start:end]
                for (int i = 0; i < start; i++) remaining.push_back(nums[i]);
                for (int i = end + 1; i < n; i++) remaining.push_back(nums[i]);

                // Check if the remaining array is strictly increasing
                if (isStrictlyIncreasing(remaining)) count++;
            }
        }

        return count;
    }
};
