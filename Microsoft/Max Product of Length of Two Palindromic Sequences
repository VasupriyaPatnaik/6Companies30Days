class Solution {
public:
    int maxProduct(string s) {
        int n = s.size();
        unordered_map<int, int> palindromes;

        // Step 1: Generate all subsequences using bitmasking
        for (int mask = 1; mask < (1 << n); ++mask) {
            string sub = "";
            for (int i = 0; i < n; ++i) {
                if (mask & (1 << i)) sub += s[i];
            }

            // Step 2: Check if the subsequence is a palindrome
            string revSub = sub;
            reverse(revSub.begin(), revSub.end());
            if (sub == revSub) {
                palindromes[mask] = sub.length(); // Store length of the palindrome
            }
        }

        // Step 3: Find two disjoint palindromic subsequences with maximum product
        int maxProduct = 0;
        vector<int> masks; // Store all valid palindrome masks
        for (auto& [mask, len] : palindromes) {
            masks.push_back(mask);
        }

        int P = masks.size();
        for (int i = 0; i < P; ++i) {
            for (int j = i + 1; j < P; ++j) {
                if ((masks[i] & masks[j]) == 0) { // Ensure disjoint subsequences
                    maxProduct = max(maxProduct, palindromes[masks[i]] * palindromes[masks[j]]);
                }
            }
        }

        return maxProduct;
    }
};
