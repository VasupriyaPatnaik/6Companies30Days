#include <unordered_map>
#include <vector>
#include <queue>
#include <unordered_set>

using namespace std;

struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {}
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};

class Solution {
public:
    void buildGraph(TreeNode* node, unordered_map<int, vector<int>>& graph, TreeNode* parent) {
        if (!node) return;
        
        // Add bidirectional edges
        if (parent) {
            graph[node->val].push_back(parent->val);
            graph[parent->val].push_back(node->val);
        }

        // Recursively build graph for left and right children
        buildGraph(node->left, graph, node);
        buildGraph(node->right, graph, node);
    }
    
    int amountOfTime(TreeNode* root, int start) {
        unordered_map<int, vector<int>> graph;
        
        // Build the graph from the tree
        buildGraph(root, graph, nullptr);
        
        // BFS to calculate infection time
        queue<int> q;
        unordered_set<int> visited;
        q.push(start);
        visited.insert(start);
        
        int minutes = -1;
        
        while (!q.empty()) {
            int size = q.size();
            minutes++;
            for (int i = 0; i < size; i++) {
                int node = q.front();
                q.pop();
                
                for (int neighbor : graph[node]) {
                    if (!visited.count(neighbor)) {
                        visited.insert(neighbor);
                        q.push(neighbor);
                    }
                }
            }
        }
        
        return minutes;
    }
};
