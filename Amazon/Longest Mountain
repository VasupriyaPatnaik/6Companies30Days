class Solution {
public:
    int longestMountain(vector<int>& arr) {
        int n = arr.size();
        if (n < 3) return 0;  // A mountain needs at least 3 elements

        int maxLen = 0;
        int i = 1;  // Start from index 1 to avoid out-of-bound errors

        while (i < n - 1) {
            // Check if arr[i] is a peak
            if (arr[i - 1] < arr[i] && arr[i] > arr[i + 1]) {
                int left = i, right = i;

                // Expand to the left
                while (left > 0 && arr[left - 1] < arr[left]) {
                    left--;
                }

                // Expand to the right
                while (right < n - 1 && arr[right] > arr[right + 1]) {
                    right++;
                }

                // Update the max length
                maxLen = max(maxLen, right - left + 1);

                // Move i to `right` (end of this mountain) to avoid unnecessary checks
                i = right;
            } else {
                i++;  // Continue searching
            }
        }
        return maxLen;
    }
};
