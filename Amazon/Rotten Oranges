#include <vector>
#include <queue>

using namespace std;

class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        queue<pair<int, int>> q;
        int freshCount = 0;
        
        // Step 1: Add all rotten oranges to the queue and count fresh oranges
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 2) {
                    q.push({i, j});
                } else if (grid[i][j] == 1) {
                    freshCount++;
                }
            }
        }
        
        // If there are no fresh oranges, return 0
        if (freshCount == 0) return 0;
        
        // Directions for moving up, down, left, and right
        vector<pair<int, int>> directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        int minutes = -1;
        
        // Step 2: BFS for rotting process
        while (!q.empty()) {
            int size = q.size();
            minutes++; // Increment time at each level of BFS
            
            for (int i = 0; i < size; i++) {
                auto [x, y] = q.front();
                q.pop();
                
                // Try all four possible directions
                for (auto [dx, dy] : directions) {
                    int nx = x + dx, ny = y + dy;
                    
                    // If it's a fresh orange, rot it and push to queue
                    if (nx >= 0 && ny >= 0 && nx < m && ny < n && grid[nx][ny] == 1) {
                        grid[nx][ny] = 2;
                        freshCount--;
                        q.push({nx, ny});
                    }
                }
            }
        }
        
        // If any fresh orange is left, return -1
        return (freshCount == 0) ? minutes : -1;
    }
};
