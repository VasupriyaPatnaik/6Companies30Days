class Solution {
public:
    const int MOD = 1e9 + 7;
    int delay, forget;
    vector<long long> memo;  // Memoization vector

    // Recursive function to compute the number of people who know the secret on day n
    long long dp(int n) {
        if (n <= 0) return 0;  // Base case: no one knows the secret on day 0 or less
        if (memo[n] != -1) return memo[n];  // Return the cached result if exists
        
        long long result = 1;  // The initial person knows the secret
        for (int i = delay; i < forget; ++i) {
            if (n - i >= 0) {
                result = (result + dp(n - i)) % MOD;  // Add people who learned the secret
            }
        }

        return memo[n] = result;  // Cache the result
    }

    int peopleAwareOfSecret(int n, int delay, int forget) {
        this->delay = delay;
        this->forget = forget;
        
        // Initialize the memoization vector with -1 (indicating uncomputed results)
        memo.resize(n + 1, -1);
        
        // Calculate the total number of people who know the secret by day n
        long long totalPeople = dp(n);
        
        // Subtract the number of people who forget the secret by day n-forget
        long long result = (totalPeople - dp(n - forget) + MOD) % MOD;
        
        return result;
    }
};
