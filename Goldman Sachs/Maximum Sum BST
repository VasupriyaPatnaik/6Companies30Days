class Solution {
public:
    int maxSum = 0;

    // Helper function that returns a tuple of:
    // 1. Is the current subtree a BST?
    // 2. The sum of the subtree if it's a valid BST.
    // 3. The min value in the subtree.
    // 4. The max value in the subtree.
    tuple<bool, int, int, int> dfs(TreeNode* node) {
        if (!node) {
            return {true, 0, INT_MAX, INT_MIN}; // A null node is a valid BST with sum 0, and extreme min/max
        }
        
        // Recursively process the left and right subtrees
        auto [left_is_bst, left_sum, left_min, left_max] = dfs(node->left);
        auto [right_is_bst, right_sum, right_min, right_max] = dfs(node->right);
        
        // Check if the current node is part of a valid BST
        if (left_is_bst && right_is_bst && left_max < node->val && right_min > node->val) {
            // The current node forms a valid BST with its left and right subtrees
            int current_sum = left_sum + right_sum + node->val;
            maxSum = max(maxSum, current_sum); // Update maxSum with the sum of the current valid BST
            
            // Return the results for this node
            return {true, current_sum, min(node->val, left_min), max(node->val, right_max)};
        } else {
            // The current node doesn't form a valid BST
            return {false, 0, 0, 0}; // Return invalid BST
        }
    }

    int maxSumBST(TreeNode* root) {
        dfs(root); // Start DFS from the root
        return maxSum;
    }
};
