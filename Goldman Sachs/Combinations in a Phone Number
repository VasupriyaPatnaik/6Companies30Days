#include <vector>
#include <string>
#include <unordered_map>

using namespace std;

class Solution {
public:
    vector<string> result;
    unordered_map<char, string> mapping {
        {'2', "abc"}, {'3', "def"}, {'4', "ghi"}, {'5', "jkl"},
        {'6', "mno"}, {'7', "pqrs"}, {'8', "tuv"}, {'9', "wxyz"}
    };

    void backtrack(string &digits, int index, string current) {
        if (index == digits.size()) {  // If we reached the end, add to result
            result.push_back(current);
            return;
        }

        string letters = mapping[digits[index]];  // Get letters for current digit
        for (char letter : letters) {
            backtrack(digits, index + 1, current + letter);
        }
    }

    vector<string> letterCombinations(string digits) {
        if (digits.empty()) return {}; // Edge case: empty input
        result.clear();
        backtrack(digits, 0, "");
        return result;
    }
};
