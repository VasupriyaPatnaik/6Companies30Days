#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    const int MOD = 1e9 + 7;
    vector<int> primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29};  // 10 primes in range [1,30]

    int numberOfGoodSubsets(vector<int>& nums) {
        // Step 1: Count frequency of each number
        vector<int> freq(31, 0);
        for (int num : nums) freq[num]++;
        
        // Step 2: Precompute valid number masks
        unordered_map<int, int> numToMask;
        for (int num = 2; num <= 30; num++) {
            int mask = 0, val = num;
            bool isValid = true;
            
            for (int i = 0; i < primes.size(); i++) {
                int prime = primes[i];
                if (val % prime == 0) {
                    if (val % (prime * prime) == 0) {
                        isValid = false;  // Number has repeated prime factors
                        break;
                    }
                    mask |= (1 << i);  // Set bit corresponding to this prime
                }
            }
            if (isValid) numToMask[num] = mask;
        }

        // Step 3: DP Initialization
        int maxMask = (1 << primes.size());  // 2^10 = 1024 possible prime combinations
        vector<int> dp(maxMask, 0);
        dp[0] = 1;  // Empty subset contributes 1

        // Step 4: DP Transition
        for (auto& [num, mask] : numToMask) {
            if (freq[num] == 0) continue;  // If the number is not in nums, skip it

            for (int m = maxMask - 1; m >= 0; m--) {  // Traverse dp in reverse
                if ((m & mask) == 0) {  // If current set is disjoint
                    dp[m | mask] = (dp[m | mask] + (long long) dp[m] * freq[num]) % MOD;
                }
            }
        }

        // Step 5: Compute result (excluding empty subset)
        int result = 0;
        for (int m = 1; m < maxMask; m++) {
            result = (result + dp[m]) % MOD;
        }

        // Step 6: Account for `1`s separately
        if (freq[1] > 0) {
            long long power = 1;
            for (int i = 0; i < freq[1]; i++) {
                power = (power * 2) % MOD;
            }
            result = (result * power) % MOD;
        }

        return result;
    }
};
