#include <vector>
using namespace std;

/**
 * Definition for a binary tree node.
 */
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {}
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};

class Solution {
public:
    int result = 0;
    
    vector<int> dfs(TreeNode* root, int distance) {
        if (!root) return {};
        
        // If the node is a leaf, return distance 1 (leaf distance starts from 1)
        if (!root->left && !root->right) return {1};
        
        vector<int> leftDist = dfs(root->left, distance);
        vector<int> rightDist = dfs(root->right, distance);
        
        // Count valid pairs between left and right subtree leaves
        for (int l : leftDist) {
            for (int r : rightDist) {
                if (l + r <= distance) {
                    result++;
                }
            }
        }

        // Collect and return updated distances (incremented by 1)
        vector<int> updatedDistances;
        for (int d : leftDist) if (d + 1 < distance) updatedDistances.push_back(d + 1);
        for (int d : rightDist) if (d + 1 < distance) updatedDistances.push_back(d + 1);
        
        return updatedDistances;
    }

    int countPairs(TreeNode* root, int distance) {
        dfs(root, distance);
        return result;
    }
};
