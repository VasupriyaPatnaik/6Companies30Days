class Solution {
public:
    int findPeakIndex(MountainArray &mountainArr) {
        int left = 0, right = mountainArr.length() - 1;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (mountainArr.get(mid) < mountainArr.get(mid + 1))
                left = mid + 1;
            else
                right = mid;
        }
        return left; // Peak index
    }

    int binarySearch(MountainArray &mountainArr, int left, int right, int target, bool ascending) {
        while (left <= right) {
            int mid = left + (right - left) / 2;
            int val = mountainArr.get(mid);
            if (val == target) return mid;
            if (ascending) {
                if (val < target) left = mid + 1;
                else right = mid - 1;
            } else {
                if (val > target) left = mid + 1;
                else right = mid - 1;
            }
        }
        return -1;
    }

    int findInMountainArray(int target, MountainArray &mountainArr) {
        int peak = findPeakIndex(mountainArr);

        // Search in the left (ascending) part
        int index = binarySearch(mountainArr, 0, peak, target, true);
        if (index != -1) return index;

        // Search in the right (descending) part
        return binarySearch(mountainArr, peak + 1, mountainArr.length() - 1, target, false);
    }
};
