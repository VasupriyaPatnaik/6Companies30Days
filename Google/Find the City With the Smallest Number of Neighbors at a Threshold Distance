#include <vector>
#include <climits>

using namespace std;

class Solution {
public:
    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
        // Step 1: Initialize distance matrix
        vector<vector<int>> dist(n, vector<int>(n, INT_MAX));
        
        // Step 2: Fill given edges
        for (const auto& edge : edges) {
            int from = edge[0], to = edge[1], weight = edge[2];
            dist[from][to] = weight;
            dist[to][from] = weight;
        }
        
        // Set distance to self as 0
        for (int i = 0; i < n; ++i) {
            dist[i][i] = 0;
        }
        
        // Step 3: Floyd-Warshall Algorithm
        for (int k = 0; k < n; ++k) {
            for (int i = 0; i < n; ++i) {
                for (int j = 0; j < n; ++j) {
                    if (dist[i][k] == INT_MAX || dist[k][j] == INT_MAX) 
                        continue;  // Prevent integer overflow
                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
                }
            }
        }
        
        // Step 4: Count reachable cities
        int minCount = n;
        int resultCity = -1;
        
        for (int i = 0; i < n; ++i) {
            int count = 0;
            for (int j = 0; j < n; ++j) {
                if (i != j && dist[i][j] <= distanceThreshold) {
                    count++;
                }
            }
            // Step 5: Select the best city
            if (count < minCount || (count == minCount && i > resultCity)) {
                minCount = count;
                resultCity = i;
            }
        }
        
        return resultCity;
    }
};
