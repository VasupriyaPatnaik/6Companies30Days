#include <vector>
#include <string>
#include <unordered_map>
#include <queue>
#include <algorithm>

using namespace std;

class Solution {
public:
    vector<string> topKFrequent(vector<string>& words, int k) {
        unordered_map<string, int> freq;  // Store word frequencies
        
        // Step 1: Count the frequency of each word
        for (const string& word : words) {
            freq[word]++;
        }
        
        // Step 2: Define a custom comparator for the min-heap
        auto cmp = [](const pair<int, string>& a, const pair<int, string>& b) {
            if (a.first == b.first) return a.second < b.second;  // Sort lexicographically if frequencies are equal
            return a.first > b.first;  // Min-heap based on frequency
        };
        
        priority_queue<pair<int, string>, vector<pair<int, string>>, decltype(cmp)> minHeap(cmp);
        
        // Step 3: Insert elements into the heap and maintain only k elements
        for (const auto& entry : freq) {
            minHeap.push({entry.second, entry.first});
            if (minHeap.size() > k) {
                minHeap.pop();  // Remove the least frequent element
            }
        }
        
        // Step 4: Extract words from heap into a vector (in reverse order)
        vector<string> result;
        while (!minHeap.empty()) {
            result.push_back(minHeap.top().second);
            minHeap.pop();
        }
        
        reverse(result.begin(), result.end());  // Correct order: highest frequency first
        return result;
    }
};
